/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface;

import exceptions.LoginException;
import java.awt.Color;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.JFileChooser;
import javax.swing.ListSelectionModel;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.filechooser.*;
import musicplayer.MusicPlayer;
import song.Song;
import users.*;
import playlists.Playlist;
import scripting.Connection;
/**
 *
 * @author Paulo
 */
public class view extends javax.swing.JFrame {

    private User activeUser;
    private ArrayList<Song> musics;
    
    DefaultListModel listmodel;
    DefaultListModel playlistsmodel;
    DefaultListModel playlistssongsmodel;
    JList songlist;
    
    ArrayList<Playlist> playlists;
    
    musicplayer.MusicPlayer player;
    
    /**
     * Creates new form view
     */
    public view() {
        initComponents();
        signup_background.setVisible(false);
        signup_input_username.setText("");
        signup_input_password.setText("");
        signup.setVisible(false);
        dashboard.setVisible(false);
    }

    private void initializeDashboard() {
        sidebar.setVisible(false);
        dashboard.setVisible(true);
        playlists_view.setVisible(false);
        defaultsongs.setVisible(true);
        
        // Load and list songs
        musics = new ArrayList<Song>();
        listmodel = new DefaultListModel();
        allsongslist.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        loadUserSongs();
        
        if(activeUser instanceof VipUser) {
            activeVipScreen();
        }
        
        player = new MusicPlayer();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        plan_selector = new javax.swing.ButtonGroup();
        login = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        temp_password = new javax.swing.JLabel();
        input_password = new javax.swing.JPasswordField();
        temp_username = new javax.swing.JLabel();
        input_username = new javax.swing.JFormattedTextField();
        input_submit = new javax.swing.JButton();
        temp_not_registered = new javax.swing.JLabel();
        anchor_newUser = new javax.swing.JLabel();
        message = new javax.swing.JLabel();
        JPod_logo = new javax.swing.JLabel();
        ufrn_logo = new javax.swing.JLabel();
        imd_logo = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        login_background = new javax.swing.JLabel();
        signup = new javax.swing.JPanel();
        signup_h1 = new javax.swing.JLabel();
        signup_form = new javax.swing.JPanel();
        signup_username = new javax.swing.JLabel();
        signup_input_username = new javax.swing.JTextField();
        signup_password = new javax.swing.JLabel();
        signup_chooseaplan = new javax.swing.JLabel();
        signup_radio_vip = new javax.swing.JRadioButton();
        signup_radio_free = new javax.swing.JRadioButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        signup_submit = new javax.swing.JButton();
        signup_cancel = new javax.swing.JButton();
        signup_input_password = new javax.swing.JPasswordField();
        signup_message = new javax.swing.JLabel();
        signup_message_username = new javax.swing.JLabel();
        imd_logo1 = new javax.swing.JLabel();
        ufrn_logo1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        signup_background = new javax.swing.JLabel();
        dashboard = new javax.swing.JPanel();
        header = new javax.swing.JPanel();
        logo = new javax.swing.JLabel();
        header_username = new javax.swing.JLabel();
        warning = new javax.swing.JLabel();
        header_signout = new javax.swing.JButton();
        body = new javax.swing.JPanel();
        songs_view = new javax.swing.JPanel();
        sidebar = new javax.swing.JPanel();
        songs_anchor = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        playlists_list = new javax.swing.JList<>();
        defaultsongs = new javax.swing.JPanel();
        songs_view_title = new javax.swing.JLabel();
        open_default_musics = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        allsongslist = new javax.swing.JList<>();
        action_play = new javax.swing.JButton();
        playlists_view = new javax.swing.JPanel();
        playlists_view_title = new javax.swing.JLabel();
        jButton6 = new javax.swing.JButton();
        playlists_view_scroll = new javax.swing.JScrollPane();
        playlistssonglist = new javax.swing.JList<>();
        playlists_view_play = new javax.swing.JButton();
        footer = new javax.swing.JPanel();
        pause_button = new javax.swing.JButton();
        stop_button = new javax.swing.JButton();
        resume_button = new javax.swing.JButton();
        current_playing = new javax.swing.JLabel();
        dashboard_background = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(1366, 737));
        setMinimumSize(new java.awt.Dimension(1024, 700));
        setPreferredSize(new java.awt.Dimension(1366, 737));
        setSize(new java.awt.Dimension(1366, 737));
        getContentPane().setLayout(new java.awt.GridBagLayout());

        login.setBackground(new java.awt.Color(255, 255, 153));
        login.setMinimumSize(new java.awt.Dimension(1024, 600));
        login.setOpaque(false);
        login.setLayout(new java.awt.GridBagLayout());

        jPanel1.setBackground(new java.awt.Color(240, 92, 181));
        jPanel1.setMaximumSize(new java.awt.Dimension(1366, 767));
        jPanel1.setMinimumSize(new java.awt.Dimension(340, 450));
        jPanel1.setOpaque(false);
        jPanel1.setPreferredSize(new java.awt.Dimension(340, 550));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        temp_password.setFont(new java.awt.Font("Open Sans", 0, 14)); // NOI18N
        temp_password.setForeground(new java.awt.Color(255, 255, 255));
        temp_password.setText("password");
        jPanel1.add(temp_password, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 170, 240, -1));

        input_password.setBackground(new java.awt.Color(45, 34, 57));
        input_password.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        input_password.setForeground(new java.awt.Color(255, 255, 255));
        input_password.setToolTipText("password");
        input_password.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        input_password.setOpaque(false);
        input_password.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                input_passwordActionPerformed(evt);
            }
        });
        jPanel1.add(input_password, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 200, 240, 30));

        temp_username.setFont(new java.awt.Font("Open Sans", 0, 14)); // NOI18N
        temp_username.setForeground(new java.awt.Color(255, 255, 255));
        temp_username.setText("username");
        jPanel1.add(temp_username, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 90, 240, -1));

        input_username.setBackground(new java.awt.Color(57, 61, 106));
        input_username.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        input_username.setForeground(new java.awt.Color(255, 255, 255));
        input_username.setFont(new java.awt.Font("Open Sans Semibold", 0, 16)); // NOI18N
        input_username.setMargin(new java.awt.Insets(2, 10, 2, 2));
        input_username.setOpaque(false);
        input_username.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                input_usernameActionPerformed(evt);
            }
        });
        jPanel1.add(input_username, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 120, 240, 30));

        input_submit.setBackground(new java.awt.Color(144, 202, 141));
        input_submit.setFont(new java.awt.Font("Open Sans Semibold", 0, 14)); // NOI18N
        input_submit.setForeground(new java.awt.Color(255, 255, 255));
        input_submit.setText("Login");
        input_submit.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        input_submit.setContentAreaFilled(false);
        input_submit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                input_submitMouseClicked(evt);
            }
        });
        input_submit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                input_submitActionPerformed(evt);
            }
        });
        jPanel1.add(input_submit, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 290, 110, 40));

        temp_not_registered.setFont(new java.awt.Font("Open Sans", 0, 12)); // NOI18N
        temp_not_registered.setForeground(new java.awt.Color(255, 255, 255));
        temp_not_registered.setText("not registered?");
        jPanel1.add(temp_not_registered, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 360, -1, -1));

        anchor_newUser.setFont(new java.awt.Font("Open Sans Semibold", 0, 12)); // NOI18N
        anchor_newUser.setForeground(new java.awt.Color(155, 229, 160));
        anchor_newUser.setText("<HTML><U>create an account</U></HTML>");
        anchor_newUser.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        anchor_newUser.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                anchor_newUserMouseClicked(evt);
            }
        });
        jPanel1.add(anchor_newUser, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 360, 130, -1));

        message.setFont(new java.awt.Font("Open Sans Semibold", 0, 14)); // NOI18N
        message.setForeground(new java.awt.Color(255, 102, 102));
        message.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        message.setAlignmentX(0.5F);
        jPanel1.add(message, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 240, 340, 30));

        JPod_logo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/database/graphics/jpod_logo_icon.png"))); // NOI18N
        jPanel1.add(JPod_logo, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 0, -1, -1));

        ufrn_logo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/database/graphics/UFRN-PNG.png"))); // NOI18N
        jPanel1.add(ufrn_logo, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 460, -1, -1));

        imd_logo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/database/graphics/imd.png"))); // NOI18N
        jPanel1.add(imd_logo, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 460, -1, -1));

        jLabel1.setFont(new java.awt.Font("Open Sans Light", 0, 10)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(244, 244, 244));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("<HTML><CENTER><STRONG>JPOD 2016</STRONG><BR>Developed by Paulo Sergio<CENTER></HTML>");
        jLabel1.setToolTipText("");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 420, 340, 30));

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        login.add(jPanel1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = -1366;
        gridBagConstraints.ipady = -770;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(login, gridBagConstraints);

        login_background.setIcon(new javax.swing.ImageIcon(getClass().getResource("/database/graphics/splash_background_adjusted.jpg"))); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = -1366;
        gridBagConstraints.ipady = -768;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(login_background, gridBagConstraints);

        signup.setMinimumSize(new java.awt.Dimension(1024, 600));
        signup.setOpaque(false);
        signup.setPreferredSize(new java.awt.Dimension(1366, 767));
        signup.setLayout(new java.awt.GridBagLayout());

        signup_h1.setFont(new java.awt.Font("Open Sans Light", 0, 36)); // NOI18N
        signup_h1.setForeground(new java.awt.Color(255, 255, 255));
        signup_h1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        signup_h1.setText("Create an account");
        signup_h1.setMaximumSize(new java.awt.Dimension(2000, 2000));
        signup_h1.setPreferredSize(new java.awt.Dimension(380, 50));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.RELATIVE;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 57;
        gridBagConstraints.ipady = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(60, 0, 0, 0);
        signup.add(signup_h1, gridBagConstraints);

        signup_form.setBackground(new java.awt.Color(255, 255, 255));
        signup_form.setFont(new java.awt.Font("Open Sans", 0, 14)); // NOI18N
        signup_form.setPreferredSize(new java.awt.Dimension(380, 603));
        signup_form.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        signup_username.setBackground(new java.awt.Color(255, 255, 255));
        signup_username.setFont(new java.awt.Font("Open Sans", 0, 14)); // NOI18N
        signup_username.setText("username:");
        signup_form.add(signup_username, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 200, -1, -1));

        signup_input_username.setFont(new java.awt.Font("Open Sans Semibold", 0, 18)); // NOI18N
        signup_input_username.setForeground(new java.awt.Color(168, 66, 213));
        signup_input_username.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true));
        signup_input_username.setOpaque(false);
        signup_form.add(signup_input_username, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 220, 320, 40));

        signup_password.setBackground(new java.awt.Color(255, 255, 255));
        signup_password.setFont(new java.awt.Font("Open Sans", 0, 14)); // NOI18N
        signup_password.setText("password:");
        signup_form.add(signup_password, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 290, -1, -1));

        signup_chooseaplan.setBackground(new java.awt.Color(168, 66, 213));
        signup_chooseaplan.setFont(new java.awt.Font("Open Sans", 0, 14)); // NOI18N
        signup_chooseaplan.setForeground(new java.awt.Color(51, 51, 51));
        signup_chooseaplan.setText("Choose a Plan:");
        signup_form.add(signup_chooseaplan, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 30, -1, -1));

        signup_radio_vip.setForeground(new java.awt.Color(168, 66, 213));
        signup_radio_vip.setText("VIP");
        signup_radio_vip.setOpaque(false);

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, plan_selector, org.jdesktop.beansbinding.ELProperty.create("${selection.selected}"), signup_radio_vip, org.jdesktop.beansbinding.BeanProperty.create("selected"));
        bindingGroup.addBinding(binding);

        signup_radio_vip.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                signup_radio_vipActionPerformed(evt);
            }
        });
        signup_form.add(signup_radio_vip, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 70, -1, -1));

        signup_radio_free.setForeground(new java.awt.Color(51, 51, 51));
        signup_radio_free.setText("Free");
        signup_radio_free.setOpaque(false);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, plan_selector, org.jdesktop.beansbinding.ELProperty.create("${selection.selected}"), signup_radio_free, org.jdesktop.beansbinding.BeanProperty.create("selected"));
        bindingGroup.addBinding(binding);

        signup_radio_free.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                signup_radio_freeActionPerformed(evt);
            }
        });
        signup_form.add(signup_radio_free, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 70, -1, -1));

        jLabel4.setBackground(new java.awt.Color(255, 255, 255));
        jLabel4.setFont(new java.awt.Font("Open Sans Semibold", 0, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(168, 66, 213));
        jLabel4.setText("<HTML><UL><LI>unlimited musics</LI><LI>custom playlists</LI><LI>enjoy complete functionality</LI><LI>no ads</LI></UL></HTML>");
        signup_form.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 90, 160, -1));

        jLabel5.setBackground(new java.awt.Color(255, 255, 255));
        jLabel5.setFont(new java.awt.Font("Open Sans Semibold", 0, 12)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(51, 51, 51));
        jLabel5.setText("<HTML><UL><LI>limited music</LI><LI>ads</LI></UL></HTML>");
        signup_form.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 90, 150, -1));

        signup_submit.setBackground(new java.awt.Color(0, 153, 153));
        signup_submit.setForeground(new java.awt.Color(51, 51, 51));
        signup_submit.setText("sign up");
        signup_submit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                signup_submitMouseClicked(evt);
            }
        });
        signup_form.add(signup_submit, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 410, -1, -1));

        signup_cancel.setText("cancel");
        signup_cancel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                signup_cancelMouseClicked(evt);
            }
        });
        signup_form.add(signup_cancel, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 410, -1, -1));

        signup_input_password.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        signup_input_password.setForeground(new java.awt.Color(168, 66, 213));
        signup_input_password.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true));
        signup_input_password.setOpaque(false);
        signup_form.add(signup_input_password, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 310, 320, 40));

        signup_message.setFont(new java.awt.Font("Open Sans", 0, 12)); // NOI18N
        signup_message.setForeground(new java.awt.Color(255, 51, 51));
        signup_form.add(signup_message, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 350, 260, 30));

        signup_message_username.setFont(new java.awt.Font("Open Sans", 0, 12)); // NOI18N
        signup_message_username.setForeground(new java.awt.Color(255, 51, 51));
        signup_form.add(signup_message_username, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 260, 260, 30));

        imd_logo1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/database/graphics/imd.png"))); // NOI18N
        signup_form.add(imd_logo1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 540, -1, -1));

        ufrn_logo1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/database/graphics/UFRN-PNG.png"))); // NOI18N
        signup_form.add(ufrn_logo1, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 540, -1, -1));

        jLabel2.setFont(new java.awt.Font("Open Sans Light", 0, 10)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(51, 51, 51));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("<HTML><CENTER><STRONG>JPOD 2016</STRONG><BR>Developed by Paulo Sergio<CENTER></HTML>");
        jLabel2.setToolTipText("");
        signup_form.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 480, 320, 30));

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.RELATIVE;
        gridBagConstraints.ipadx = 20;
        gridBagConstraints.ipady = 17;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.9;
        signup.add(signup_form, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 346;
        gridBagConstraints.ipady = 770;
        getContentPane().add(signup, gridBagConstraints);

        signup_background.setIcon(new javax.swing.ImageIcon(getClass().getResource("/database/graphics/sigup_background.jpg"))); // NOI18N
        signup_background.setText("jLabel1");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = -1478;
        gridBagConstraints.ipady = -900;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(signup_background, gridBagConstraints);

        dashboard.setBackground(new java.awt.Color(255, 255, 255));
        dashboard.setMinimumSize(new java.awt.Dimension(1024, 700));
        dashboard.setOpaque(false);
        dashboard.setPreferredSize(new java.awt.Dimension(1367, 737));
        dashboard.setLayout(new java.awt.GridBagLayout());

        header.setBackground(new java.awt.Color(102, 102, 102));
        header.setMinimumSize(new java.awt.Dimension(1024, 50));
        header.setOpaque(false);
        header.setPreferredSize(new java.awt.Dimension(1367, 50));
        header.setLayout(new java.awt.GridBagLayout());

        logo.setBackground(new java.awt.Color(146, 72, 108));
        logo.setFont(new java.awt.Font("Open Sans Semibold", 0, 18)); // NOI18N
        logo.setForeground(new java.awt.Color(255, 255, 255));
        logo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        logo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/database/graphics/jpod_logo_icon_header.png"))); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipady = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.weightx = 0.25;
        gridBagConstraints.weighty = 1.0;
        header.add(logo, gridBagConstraints);

        header_username.setBackground(new java.awt.Color(255, 255, 255));
        header_username.setFont(new java.awt.Font("Open Sans Light", 0, 18)); // NOI18N
        header_username.setForeground(new java.awt.Color(255, 255, 255));
        header_username.setText("USER: Paulo");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 140;
        gridBagConstraints.ipady = 50;
        gridBagConstraints.weightx = 0.25;
        gridBagConstraints.weighty = 1.0;
        header.add(header_username, gridBagConstraints);

        warning.setFont(new java.awt.Font("Open Sans", 0, 12)); // NOI18N
        warning.setForeground(new java.awt.Color(255, 255, 204));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 550;
        gridBagConstraints.ipady = 40;
        gridBagConstraints.weightx = 0.4;
        gridBagConstraints.weighty = 1.0;
        header.add(warning, gridBagConstraints);

        header_signout.setBackground(new java.awt.Color(168, 79, 79));
        header_signout.setIcon(new javax.swing.ImageIcon(getClass().getResource("/database/graphics/signout-button.png"))); // NOI18N
        header_signout.setAlignmentY(0.0F);
        header_signout.setContentAreaFilled(false);
        header_signout.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        header_signout.setIconTextGap(0);
        header_signout.setMargin(new java.awt.Insets(0, 0, 0, 0));
        header_signout.setName(""); // NOI18N
        header_signout.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                header_signoutMouseClicked(evt);
            }
        });
        header_signout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                header_signoutActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipady = 27;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 1.0;
        header.add(header_signout, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = -1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.1;
        dashboard.add(header, gridBagConstraints);

        body.setBackground(new java.awt.Color(51, 33, 55));
        body.setMinimumSize(new java.awt.Dimension(1024, 700));
        body.setOpaque(false);
        body.setPreferredSize(new java.awt.Dimension(1366, 200));
        body.setLayout(new java.awt.GridBagLayout());

        songs_view.setOpaque(false);
        songs_view.setLayout(new java.awt.GridBagLayout());

        sidebar.setMaximumSize(new java.awt.Dimension(280, 500));
        sidebar.setMinimumSize(new java.awt.Dimension(200, 500));
        sidebar.setOpaque(false);
        sidebar.setPreferredSize(new java.awt.Dimension(200, 500));
        sidebar.setLayout(new java.awt.GridBagLayout());

        songs_anchor.setFont(new java.awt.Font("Open Sans", 0, 14)); // NOI18N
        songs_anchor.setForeground(new java.awt.Color(255, 255, 255));
        songs_anchor.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        songs_anchor.setText("<HTML><U>ALL SONGS</U></HTML>");
        songs_anchor.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        songs_anchor.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                songs_anchorMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 146;
        gridBagConstraints.ipady = 36;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        sidebar.add(songs_anchor, gridBagConstraints);

        jButton2.setForeground(new java.awt.Color(255, 255, 204));
        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/database/graphics/new-playlist-button.png"))); // NOI18N
        jButton2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        jButton2.setContentAreaFilled(false);
        jButton2.setMaximumSize(new java.awt.Dimension(101, 33));
        jButton2.setMinimumSize(new java.awt.Dimension(101, 33));
        jButton2.setPreferredSize(new java.awt.Dimension(101, 33));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 79;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        sidebar.add(jButton2, gridBagConstraints);

        jScrollPane2.setBackground(new java.awt.Color(102, 102, 102));

        playlists_list.setBackground(new java.awt.Color(102, 102, 102));
        playlists_list.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(244, 244, 244)));
        playlists_list.setFont(new java.awt.Font("Open Sans Semibold", 0, 12)); // NOI18N
        playlists_list.setForeground(new java.awt.Color(224, 224, 224));
        playlists_list.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        playlists_list.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        playlists_list.setFixedCellHeight(20);
        playlists_list.setFixedCellWidth(100);
        playlists_list.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                playlists_listMouseClicked(evt);
            }
        });
        playlists_list.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                playlists_listValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(playlists_list);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 157;
        gridBagConstraints.ipady = 337;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        sidebar.add(jScrollPane2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.02;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 8);
        songs_view.add(sidebar, gridBagConstraints);

        defaultsongs.setBackground(new java.awt.Color(0, 51, 51));
        defaultsongs.setForeground(new java.awt.Color(0, 51, 51));
        defaultsongs.setMinimumSize(new java.awt.Dimension(1024, 463));
        defaultsongs.setOpaque(false);
        defaultsongs.setLayout(new java.awt.GridBagLayout());

        songs_view_title.setFont(new java.awt.Font("Open Sans Light", 0, 36)); // NOI18N
        songs_view_title.setForeground(new java.awt.Color(255, 255, 255));
        songs_view_title.setText("all songs");
        songs_view_title.setMaximumSize(new java.awt.Dimension(130, 50));
        songs_view_title.setMinimumSize(new java.awt.Dimension(30, 50));
        songs_view_title.setPreferredSize(new java.awt.Dimension(50, 50));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.05;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        defaultsongs.add(songs_view_title, gridBagConstraints);

        open_default_musics.setIcon(new javax.swing.ImageIcon(getClass().getResource("/database/graphics/open-files-button.png"))); // NOI18N
        open_default_musics.setContentAreaFilled(false);
        open_default_musics.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                open_default_musicsMouseClicked(evt);
            }
        });
        open_default_musics.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                open_default_musicsActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipady = 15;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 4, 4);
        defaultsongs.add(open_default_musics, gridBagConstraints);

        jScrollPane1.setBackground(new java.awt.Color(102, 102, 102));

        allsongslist.setBackground(new java.awt.Color(102, 102, 102));
        allsongslist.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true));
        allsongslist.setFont(new java.awt.Font("Open Sans", 0, 12)); // NOI18N
        allsongslist.setForeground(new java.awt.Color(245, 245, 245));
        allsongslist.setMaximumSize(new java.awt.Dimension(600, 200));
        allsongslist.setMinimumSize(new java.awt.Dimension(400, 200));
        allsongslist.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                allsongslistValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(allsongslist);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 1107;
        gridBagConstraints.ipady = 347;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.8;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 4, 4);
        defaultsongs.add(jScrollPane1, gridBagConstraints);

        action_play.setBackground(new java.awt.Color(105, 165, 80));
        action_play.setIcon(new javax.swing.ImageIcon(getClass().getResource("/database/graphics/play-selected-button.png"))); // NOI18N
        action_play.setContentAreaFilled(false);
        action_play.setOpaque(true);
        action_play.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                action_playActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 15, 0);
        defaultsongs.add(action_play, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.88;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 8, 0, 8);
        songs_view.add(defaultsongs, gridBagConstraints);

        playlists_view.setBackground(new java.awt.Color(51, 33, 55));
        playlists_view.setMinimumSize(new java.awt.Dimension(1024, 700));
        playlists_view.setOpaque(false);
        playlists_view.setLayout(new java.awt.GridBagLayout());

        playlists_view_title.setBackground(new java.awt.Color(255, 255, 255));
        playlists_view_title.setFont(new java.awt.Font("Open Sans Light", 0, 36)); // NOI18N
        playlists_view_title.setForeground(new java.awt.Color(255, 255, 255));
        playlists_view_title.setText("Playlist name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.05;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        playlists_view.add(playlists_view_title, gridBagConstraints);

        jButton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/database/graphics/open-files-button.png"))); // NOI18N
        jButton6.setToolTipText("");
        jButton6.setContentAreaFilled(false);
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipady = 15;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 4, 4);
        playlists_view.add(jButton6, gridBagConstraints);

        playlists_view_scroll.setBackground(new java.awt.Color(102, 102, 102));

        playlistssonglist.setBackground(new java.awt.Color(102, 102, 102));
        playlistssonglist.setFont(new java.awt.Font("Open Sans", 0, 12)); // NOI18N
        playlistssonglist.setForeground(new java.awt.Color(255, 255, 255));
        playlistssonglist.setMaximumSize(new java.awt.Dimension(600, 200));
        playlistssonglist.setMinimumSize(new java.awt.Dimension(400, 200));
        playlistssonglist.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                playlistssonglistValueChanged(evt);
            }
        });
        playlists_view_scroll.setViewportView(playlistssonglist);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 1087;
        gridBagConstraints.ipady = 347;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.8;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 4, 4);
        playlists_view.add(playlists_view_scroll, gridBagConstraints);

        playlists_view_play.setBackground(new java.awt.Color(105, 165, 80));
        playlists_view_play.setIcon(new javax.swing.ImageIcon(getClass().getResource("/database/graphics/play-selected-button.png"))); // NOI18N
        playlists_view_play.setContentAreaFilled(false);
        playlists_view_play.setOpaque(true);
        playlists_view_play.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playlists_view_playActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 15, 4);
        playlists_view.add(playlists_view_play, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.88;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 8, 0, 8);
        songs_view.add(playlists_view, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = -1110;
        gridBagConstraints.ipady = 40;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        body.add(songs_view, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.RELATIVE;
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.RELATIVE;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.6;
        dashboard.add(body, gridBagConstraints);

        footer.setBackground(new java.awt.Color(112, 88, 133));
        footer.setOpaque(false);
        footer.setLayout(new java.awt.GridBagLayout());

        pause_button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/database/graphics/pause-button.png"))); // NOI18N
        pause_button.setContentAreaFilled(false);
        pause_button.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        pause_button.setMargin(new java.awt.Insets(0, 0, 0, 0));
        pause_button.setMaximumSize(new java.awt.Dimension(103, 39));
        pause_button.setMinimumSize(new java.awt.Dimension(103, 39));
        pause_button.setPreferredSize(new java.awt.Dimension(103, 39));
        pause_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pause_buttonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 0.033;
        gridBagConstraints.weighty = 1.0;
        footer.add(pause_button, gridBagConstraints);

        stop_button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/database/graphics/stop-button.png"))); // NOI18N
        stop_button.setContentAreaFilled(false);
        stop_button.setMaximumSize(new java.awt.Dimension(103, 39));
        stop_button.setMinimumSize(new java.awt.Dimension(103, 39));
        stop_button.setPreferredSize(new java.awt.Dimension(103, 39));
        stop_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stop_buttonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 0.033;
        gridBagConstraints.weighty = 1.0;
        footer.add(stop_button, gridBagConstraints);
        stop_button.getAccessibleContext().setAccessibleName("stop playing");

        resume_button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/database/graphics/resume-button.png"))); // NOI18N
        resume_button.setContentAreaFilled(false);
        resume_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resume_buttonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 0.033;
        gridBagConstraints.weighty = 1.0;
        footer.add(resume_button, gridBagConstraints);

        current_playing.setFont(new java.awt.Font("Open Sans Semibold", 0, 12)); // NOI18N
        current_playing.setForeground(new java.awt.Color(255, 255, 255));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.9;
        gridBagConstraints.weighty = 1.0;
        footer.add(current_playing, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 1227;
        gridBagConstraints.ipady = 67;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.3;
        dashboard.add(footer, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = -1370;
        gridBagConstraints.ipady = -710;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(dashboard, gridBagConstraints);

        dashboard_background.setIcon(new javax.swing.ImageIcon(getClass().getResource("/database/graphics/bbg.jpg"))); // NOI18N
        dashboard_background.setText("jLabel1");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        getContentPane().add(dashboard_background, gridBagConstraints);

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void input_usernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_input_usernameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_input_usernameActionPerformed

    private void input_passwordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_input_passwordActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_input_passwordActionPerformed

    private void input_submitMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_input_submitMouseClicked
        UsersBST users = new UsersBST();     
        try {
            activeUser = users.getUser(input_username.getText().toLowerCase(), new String(input_password.getPassword()));
            login_background.setVisible(false);
            login.setVisible(false);
            input_username.setText("");
            input_password.setText("");
            initializeDashboard();
        } catch (LoginException e) {
            message.setForeground(new Color(150,62,62));
            message.setText(e.getMessage());
            
        }
    }//GEN-LAST:event_input_submitMouseClicked

    private void input_submitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_input_submitActionPerformed

    }//GEN-LAST:event_input_submitActionPerformed

    private void anchor_newUserMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_anchor_newUserMouseClicked
        login_background.setVisible(false);
        input_password.setText("");
        login.setVisible(false);
        signup_background.setVisible(true);
        signup.setVisible(true);
    }//GEN-LAST:event_anchor_newUserMouseClicked

    private void signup_radio_vipActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_signup_radio_vipActionPerformed
        if(signup_radio_free.isSelected())
            signup_radio_free.setSelected(false);
    }//GEN-LAST:event_signup_radio_vipActionPerformed

    private void signup_radio_freeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_signup_radio_freeActionPerformed
        if(signup_radio_vip.isSelected())
            signup_radio_vip.setSelected(false);
    }//GEN-LAST:event_signup_radio_freeActionPerformed

    private void signup_cancelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_signup_cancelMouseClicked
        signup_background.setVisible(false);
        signup_input_username.setText("");
        signup_input_password.setText("");
        signup.setVisible(false);
        login_background.setVisible(true);
        login.setVisible(true);
    }//GEN-LAST:event_signup_cancelMouseClicked

    private void signup_submitMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_signup_submitMouseClicked
        if(signup_radio_free.isSelected() || signup_radio_vip.isSelected()) {
            if(!(signup_input_username.getText().equals(""))) {
                if(!(new String(signup_input_password.getPassword()).equals(""))) {
                    UsersBST users = new UsersBST();
                    if(users.hasUser(signup_input_username.getText().toLowerCase())) {
                        signup_message_username.setText("User already taken");
                    }
                    else {
                        User newuser;
                        if(signup_radio_free.isSelected()) {
                            newuser = Factory.createUser(signup_input_username.getText().toLowerCase(), new String(signup_input_password.getPassword()), false);
                            // newuser = new DefaultUser(signup_input_username.getText().toLowerCase(), new String(signup_input_password.getPassword()));
                            
                        }
                        else {
                            newuser = Factory.createUser(signup_input_username.getText().toLowerCase(), new String(signup_input_password.getPassword()), true);
                            // newuser = new VipUser(signup_input_username.getText().toLowerCase(), new String(signup_input_password.getPassword()));
                        }
                        
                        try {  
                            Connection database = Connection.getInstance();
                            database.registerUser(newuser, users.getFilePath(), newuser instanceof VipUser);
                            input_username.setText(signup_input_username.getText());
                            signup_input_username.setText("");
                            signup_input_password.setText("");
                            login_background.setVisible(true);
                            login.setVisible(true);
                            message.setForeground(new Color(62,160,62));
                            message.setText("account created with success. You can sign in.");
                            signup_background.setVisible(false);
                            signup.setVisible(false);
                            signup_input_password.setText("");
                        } catch (IOException ex) {
                            ex.printStackTrace();
                            signup_message.setText("There was an error creating this user. try again");
                        }
                    }
                } else {
                    signup_message.setText("please type a password");
                }
            } else {
                signup_message.setText("you need to type an username");
            }
        } else {
            signup_message.setText("please choose a plan.");
        }
    }//GEN-LAST:event_signup_submitMouseClicked

    private void header_signoutMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_header_signoutMouseClicked
        player.stop();
        current_playing.setText("");
        activeUser = null;
        musics = null;
        allsongslist.removeAll();
        if(playlists_view.isVisible()) {
            playlistssonglist.removeAll();
            playlistssongsmodel.removeAllElements();
        }
            
        listmodel.removeAllElements();                
        dashboard.setVisible(false);
        login_background.setVisible(true);
        login.setVisible(true);
    }//GEN-LAST:event_header_signoutMouseClicked

    private void allsongslistValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_allsongslistValueChanged
        String music_file = allsongslist.getSelectedValue();
    }//GEN-LAST:event_allsongslistValueChanged

    private void action_playActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_action_playActionPerformed
        String music_file = allsongslist.getSelectedValue();
        Song songFile = musics.get(allsongslist.getSelectedIndex());
        current_playing.setText("<HTML>current playing<BR>" + songFile.getTitle() + "</HTML>");
        // o player fica parado enquanto a musica toca. Thread em andamento;
        player.play(songFile);
    }//GEN-LAST:event_action_playActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        String playlistName = javax.swing.JOptionPane.showInputDialog("Playlist name:");
        if(playlistName.length() > 0)
            createNewPlaylist(playlistName);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void playlistssonglistValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_playlistssonglistValueChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_playlistssonglistValueChanged

    private void playlists_view_playActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playlists_view_playActionPerformed
        int playlistindex = playlists_list.getSelectedIndex();
        int songindex = playlistssonglist.getSelectedIndex();
        Song song = playlists.get(playlistindex).listSongs().get(songindex);
        current_playing.setText("<HTML>current playing<BR>" + song.getTitle() + "</HTML>");
        player.play(song);
    }//GEN-LAST:event_playlists_view_playActionPerformed

    private void playlists_listValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_playlists_listValueChanged
        
    }//GEN-LAST:event_playlists_listValueChanged

    private void open_default_musicsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_open_default_musicsMouseClicked
        JFileChooser openFile = new JFileChooser();
        openFile.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        FileFilter filter = new FileNameExtensionFilter("MP3 File","mp3");
        openFile.setFileFilter(filter);
        openFile.setMultiSelectionEnabled(true);
        openFile.showOpenDialog(null);
        java.io.File[] files = openFile.getSelectedFiles();
        loadFiles(files);
    }//GEN-LAST:event_open_default_musicsMouseClicked

    private void open_default_musicsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_open_default_musicsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_open_default_musicsActionPerformed

    private void pause_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pause_buttonActionPerformed
        try {
            player.pause();
        } catch (InterruptedException ex) {
            Logger.getLogger(view.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_pause_buttonActionPerformed

    private void resume_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resume_buttonActionPerformed
        player.resume();
    }//GEN-LAST:event_resume_buttonActionPerformed

    private void songs_anchorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_songs_anchorMouseClicked
        playlists_view.setVisible(false); 
        defaultsongs.setVisible(true);
    }//GEN-LAST:event_songs_anchorMouseClicked

    private void playlists_listMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_playlists_listMouseClicked
        String chosenPlaylist = playlists_list.getSelectedValue();        
        playlistssongsmodel = new DefaultListModel();
        for(Playlist playlist : playlists) {
            if(playlist.getTitle().equals(chosenPlaylist)){
                try {
                    loadPlaylistView(playlist);
                    break;
                } catch (IOException e) {
                    warning.setText("there was an error opening playlist " + chosenPlaylist + ".");                    
                    defaultsongs.setVisible(true);
                    playlists_view.setVisible(false);
                }
            }
        }
    }//GEN-LAST:event_playlists_listMouseClicked

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        JFileChooser openFile = new JFileChooser();
        openFile.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        FileFilter filter = new FileNameExtensionFilter("MP3 File","mp3");
        openFile.setFileFilter(filter);
        openFile.setMultiSelectionEnabled(true);
        openFile.showOpenDialog(null);
        java.io.File[] files = openFile.getSelectedFiles();
        addToPlaylist(files, playlists_list.getSelectedValue());
        loadFiles(files);
    }//GEN-LAST:event_jButton6ActionPerformed

    private void header_signoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_header_signoutActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_header_signoutActionPerformed

    private void stop_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stop_buttonActionPerformed
        player.stop();
        current_playing.setText("");
    }//GEN-LAST:event_stop_buttonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws ClassNotFoundException, InstantiationException, IllegalAccessException, UnsupportedLookAndFeelException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(view.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(view.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(view.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(view.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        String lookAndFeel = UIManager.getSystemLookAndFeelClassName();
        UIManager.setLookAndFeel(lookAndFeel);
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new view().setVisible(true);
            }
        });
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel JPod_logo;
    private javax.swing.JButton action_play;
    private javax.swing.JList<String> allsongslist;
    private javax.swing.JLabel anchor_newUser;
    private javax.swing.JPanel body;
    private javax.swing.JLabel current_playing;
    private javax.swing.JPanel dashboard;
    private javax.swing.JLabel dashboard_background;
    private javax.swing.JPanel defaultsongs;
    private javax.swing.JPanel footer;
    private javax.swing.JPanel header;
    private javax.swing.JButton header_signout;
    private javax.swing.JLabel header_username;
    private javax.swing.JLabel imd_logo;
    private javax.swing.JLabel imd_logo1;
    private javax.swing.JPasswordField input_password;
    private javax.swing.JButton input_submit;
    private javax.swing.JFormattedTextField input_username;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPanel login;
    private javax.swing.JLabel login_background;
    private javax.swing.JLabel logo;
    private javax.swing.JLabel message;
    private javax.swing.JButton open_default_musics;
    private javax.swing.JButton pause_button;
    private javax.swing.ButtonGroup plan_selector;
    private javax.swing.JList<String> playlists_list;
    private javax.swing.JPanel playlists_view;
    private javax.swing.JButton playlists_view_play;
    private javax.swing.JScrollPane playlists_view_scroll;
    private javax.swing.JLabel playlists_view_title;
    private javax.swing.JList<String> playlistssonglist;
    private javax.swing.JButton resume_button;
    private javax.swing.JPanel sidebar;
    private javax.swing.JPanel signup;
    private javax.swing.JLabel signup_background;
    private javax.swing.JButton signup_cancel;
    private javax.swing.JLabel signup_chooseaplan;
    private javax.swing.JPanel signup_form;
    private javax.swing.JLabel signup_h1;
    private javax.swing.JPasswordField signup_input_password;
    private javax.swing.JTextField signup_input_username;
    private javax.swing.JLabel signup_message;
    private javax.swing.JLabel signup_message_username;
    private javax.swing.JLabel signup_password;
    private javax.swing.JRadioButton signup_radio_free;
    private javax.swing.JRadioButton signup_radio_vip;
    private javax.swing.JButton signup_submit;
    private javax.swing.JLabel signup_username;
    private javax.swing.JLabel songs_anchor;
    private javax.swing.JPanel songs_view;
    private javax.swing.JLabel songs_view_title;
    private javax.swing.JButton stop_button;
    private javax.swing.JLabel temp_not_registered;
    private javax.swing.JLabel temp_password;
    private javax.swing.JLabel temp_username;
    private javax.swing.JLabel ufrn_logo;
    private javax.swing.JLabel ufrn_logo1;
    private javax.swing.JLabel warning;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    public void loadFiles(java.io.File[] files) {
        String songsFile = activeUser.getSongsFolder() + "/songs/songs.txt";
        try {
            allsongslist.setModel(listmodel);
            for(java.io.File file : files) {
                if(file.isDirectory()) {
                    for(File subfile : Connection.getInstance().listMusicFiles(file.getAbsolutePath())) {
                        Connection.getInstance().writeToFile(songsFile, subfile.getPath(), true);
                        musics.add(new Song(subfile));
                        listmodel.addElement(subfile.getName().substring(0, subfile.getName().length() - 4));
                    }
                } else {
                    Connection.getInstance().writeToFile(songsFile, file.getAbsolutePath(), true);
                    musics.add(new Song(file));
                    listmodel.addElement(file.getName().substring(0, file.getName().length() - 4));
                }
                   


            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void createNewPlaylist(String playlistName) {
        String directory = activeUser.getSongsFolder() + "/playlists/";
        playlists_list.setModel(playlistsmodel);
        try {
            Connection.getInstance().createFile(playlistName, directory, "txt");
            File playlist = new File(directory + playlistName + ".txt");
            playlists.add(new Playlist(playlist, playlistName));
            playlistsmodel.addElement(playlistName);
        } catch (IOException e) {
            warning.setText("Could not create the playlist file.");
        }
    }

    private void loadPlaylistView(Playlist playlist) throws IOException {
        playlists_view_title.setText(playlist.getTitle());
        playlistssonglist.setModel(playlistssongsmodel);
        String[] list = Connection.getInstance().openFile(playlist.getFile().getAbsolutePath());
        if(list.length > 0) {
            for(String title : list) {
                File song = new File(title);
                playlist.addSong(new Song(song));
                playlistssongsmodel.addElement(song.getName().substring(0, song.getName().length() - 4));
            }
        }        
        playlists_view.setVisible(true);
        defaultsongs.setVisible(false);
    }

    private void populateSongList(String[] songlist) {
        // populate an array with Songs from the user songs.txt file
        allsongslist.setModel(listmodel);
        java.io.File temp;
        // musics = new ArrayList<Song>();
        for(String song : songlist) {
            // ADD SONGS FROM FILE SONGS.TXT TO ARRAYLIST<SONG>
            temp = new java.io.File(song);
            String filename = temp.getName();
            String shortname = filename.substring(0, filename.length() - 4);                    
            musics.add(new Song(temp));
            listmodel.addElement(shortname);
        }
    }

    private void loadUserSongs() {
        try {
            String[] userSongs = activeUser.loadSongs();
            if(userSongs.length > 0){
                populateSongList(userSongs);
            } else {
                // nÃO HÁ MUSICAS (ADICIONAR)
            }
        } catch (IOException e){
            warning.setText("could not update the music list");
        } finally {
            header_username.setText("user: " + activeUser.getUsername() + ((activeUser instanceof VipUser) ? " (Vip)" : ""));
        }
    }

    private void activeVipScreen() {
        playlistsmodel = new DefaultListModel();
        playlists = new ArrayList<Playlist>();
        playlists_list.setModel(playlistsmodel);
        playlists_list.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        String playlistshortname;
        try {
            File[] playlistsname = Connection.getInstance().listFiles(activeUser.getSongsFolder() + "/playlists");
            for(File playlist : playlistsname) {
                playlistshortname = playlist.getName().substring(0, playlist.getName().length() - 4);
                playlists.add(new Playlist(playlist, playlistshortname));
                playlistsmodel.addElement(playlistshortname);
            }
        } catch (IOException e) {
            login_background.setVisible(true);
            login.setVisible(true);
            message.setText(("An error ocurred and you were logged out."));
        }
        sidebar.setVisible(true);
    }

    private void addToPlaylist(File[] files, String playlistName) {
        String playlistFile = activeUser.getSongsFolder() + "/playlists/" + playlistName + ".txt";
        try {
            playlistssonglist.setModel(playlistssongsmodel);
            for(java.io.File file : files) {
                if(file.isDirectory()) {
                    for(File subfile : Connection.getInstance().listMusicFiles(file.getAbsolutePath())) {     
                        Connection.getInstance().writeToFile(playlistFile, subfile.getPath(), true);
                        playlists.get(playlists_list.getSelectedIndex()).listSongs().add(new Song(subfile));
                        playlistssongsmodel.addElement(subfile.getName().substring(0, subfile.getName().length() - 4));                        
                    }
                } else {
                    Connection.getInstance().writeToFile(playlistFile, file.getAbsolutePath(), true);            
                    playlists.get(playlists_list.getSelectedIndex()).listSongs().add(new Song(file));
                    playlistssongsmodel.addElement(file.getName().substring(0, file.getName().length() - 4));
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
